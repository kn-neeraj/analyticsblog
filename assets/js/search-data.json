{
  
    
        "post0": {
            "title": "Vertical search algo implemented using Python",
            "content": "import networkx as nx import pandas as pd import os import json import ast import matplotlib.pyplot as plt from sklearn.feature_extraction.text import TfidfVectorizer import numpy as np from IPython.display import Image from IPython.core.display import HTML pd.set_option(&#39;display.max_colwidth&#39;,1000) . What are we trying to do here? We want to create vertical search to find TED videos based on our query. | Dataset: All video recordings of TED Talks uploaded on official TED website until Sept 2017. | Dataset contains columns talk title, transcript, url, main speaker, related ted talks for any ted talk&lt;/b&gt;&lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; path_to_data = os.getcwd() + &quot; data &quot; ted_main_filepath = path_to_data + &quot;ted_main.csv&quot; transcripts_filepath = path_to_data + &quot;transcripts.csv&quot; ted_main_df = pd.read_csv(ted_main_filepath) ted_main_df = ted_main_df[[&#39;title&#39;, &#39;url&#39;, &#39;related_talks&#39;]] transcripts_df = pd.read_csv(transcripts_filepath) print(ted_main_df.shape) print(transcripts_df.shape) #merge the two dataframes to create one. final_ted_df = transcripts_df.merge(ted_main_df, on=&quot;url&quot;) print(final_ted_df.shape) . (2550, 3) (2467, 2) (2467, 4) . # Pagerank algorithm tries to find the most prominent web pages in a network of web pages. # Essentially pagerank of a webpage or node in the network is dependent on its immediate neighbour&#39;s rank and so and so forth. # A node with a higher pagerank is cited by other highly pageranked nodes # In our case of vertical search of TED videos based on search query, we will create a directed graph of ted videos as nodes # and directed edge to all related ted videos from the source ted video. # Assumption: If a ted video is in recommendations of high ranked ted videos it must be high ranked as well. #To create a directed graph we will use networkx library # we need to create a dataframe of all edges (source ted video, recommended ted video) recommendations_df = final_ted_df[[&quot;title&quot;,&quot;related_talks&quot;]] print(recommendations_df) . title 0 Do schools kill creativity? 1 Averting the climate crisis 2 Simplicity sells 3 Greening the ghetto 4 The best stats you&#39;ve ever seen ... ... 2462 What we&#39;re missing in the debate about immigra... 2463 The most Martian place on Earth 2464 What intelligent machines can learn from a sch... 2465 A black man goes undercover in the alt-right 2466 How a video game might help us build better ci... related_talks 0 [{&#39;id&#39;: 865, &#39;hero&#39;: &#39;https://pe.tedcdn.com/im... 1 [{&#39;id&#39;: 243, &#39;hero&#39;: &#39;https://pe.tedcdn.com/im... 2 [{&#39;id&#39;: 1725, &#39;hero&#39;: &#39;https://pe.tedcdn.com/i... 3 [{&#39;id&#39;: 1041, &#39;hero&#39;: &#39;https://pe.tedcdn.com/i... 4 [{&#39;id&#39;: 2056, &#39;hero&#39;: &#39;https://pe.tedcdn.com/i... ... ... 2462 [{&#39;id&#39;: 2596, &#39;hero&#39;: &#39;https://pe.tedcdn.com/i... 2463 [{&#39;id&#39;: 2491, &#39;hero&#39;: &#39;https://pe.tedcdn.com/i... 2464 [{&#39;id&#39;: 2346, &#39;hero&#39;: &#39;https://pe.tedcdn.com/i... 2465 [{&#39;id&#39;: 2512, &#39;hero&#39;: &#39;https://pe.tedcdn.com/i... 2466 [{&#39;id&#39;: 2682, &#39;hero&#39;: &#39;https://pe.tedcdn.com/i... [2467 rows x 2 columns] . def recommended_titles_list(reco_str): data = json.dumps(ast.literal_eval(reco_str)) jdata = json.loads(data) titles_list = [] for data in jdata: titles_list.append(data[&#39;title&#39;]) return titles_list . #Take each line from sheet and write to a graph with &quot;title&quot; and &quot;related_title&quot;. columns = [&#39;title&#39;, &#39;related_title&#39;] edges_df = pd.DataFrame(columns=columns) for index, row in recommendations_df.iterrows(): title = row[&#39;title&#39;] reco_list = recommended_titles_list(row[&#39;related_talks&#39;]) for reco_title in reco_list: edges_df = edges_df.append({&#39;title&#39;:title, &#39;related_title&#39;:reco_title}, ignore_index=True) print(edges_df.head(5)) # There are 14802 directed edges in the graph. print(edges_df.shape) . title 0 Do schools kill creativity? 1 Do schools kill creativity? 2 Do schools kill creativity? 3 Do schools kill creativity? 4 Do schools kill creativity? related_title 0 Bring on the learning revolution! 1 How to escape education&#39;s death valley 2 How to fix a broken school? Lead fearlessly, l... 3 Education innovation in the slums 4 A short intro to the Studio School (14802, 2) . # Create the directed graph from edges dataframe using networkx di_reco_graph = nx.from_pandas_edgelist(edges_df,&#39;title&#39;,&#39;related_title&#39;, create_using=nx.DiGraph()) . #Print generic info about directed graph print(nx.info(di_reco_graph)) # Pagerank is a variant of eigenvector. Hence we find eigenvectors for each node (ted_video) eigenvector_dict = nx.eigenvector_centrality(di_reco_graph) # normalize the eigenvectors (b/w 0 and 1) factor=1.0/sum(eigenvector_dict.values()) normalised_eigenvector_dict = {k: v*factor for k, v in eigenvector_dict.items() } #print(normalised_eigenvector_dict) #print({k: v for k, v in sorted(normalised_eigenvector_dict.items(), key=lambda item: item[1], reverse = True)}) # Add the eigen vector to final_ted_df dataframe. eigenvectors_df = pd.DataFrame(normalised_eigenvector_dict.items(), columns=[&#39;title&#39;, &#39;eigenvector_value&#39;]) final_ted_df = final_ted_df.merge(eigenvectors_df,on=&quot;title&quot;) print(final_ted_df.head(1)) . Name: Type: DiGraph Number of nodes: 2520 Number of edges: 14784 Average in degree: 5.8667 Average out degree: 5.8667 transcript 0 Good morning. How are you?(Laughter)It&#39;s been great, hasn&#39;t it? I&#39;ve been blown away by the whole thing. In fact, I&#39;m leaving.(Laughter)There have been three themes running through the conference which are relevant to what I want to talk about. One is the extraordinary evidence of human creativity in all of the presentations that we&#39;ve had and in all of the people here. Just the variety of it and the range of it. The second is that it&#39;s put us in a place where we have no idea what&#39;s going to happen, in terms of the future. No idea how this may play out.I have an interest in education. Actually, what I find is everybody has an interest in education. Don&#39;t you? I find this very interesting. If you&#39;re at a dinner party, and you say you work in education — Actually, you&#39;re not often at dinner parties, frankly.(Laughter)If you work in education, you&#39;re not asked.(Laughter)And you&#39;re never asked back, curiously. That&#39;s strange to me. But if you are, and you say to somebody, you know, the... url 0 https://www.ted.com/talks/ken_robinson_says_schools_kill_creativity n title 0 Do schools kill creativity? related_talks 0 [{&#39;id&#39;: 865, &#39;hero&#39;: &#39;https://pe.tedcdn.com/images/ted/172559_800x600.jpg&#39;, &#39;speaker&#39;: &#39;Ken Robinson&#39;, &#39;title&#39;: &#39;Bring on the learning revolution!&#39;, &#39;duration&#39;: 1008, &#39;slug&#39;: &#39;sir_ken_robinson_bring_on_the_revolution&#39;, &#39;viewed_count&#39;: 7266103}, {&#39;id&#39;: 1738, &#39;hero&#39;: &#39;https://pe.tedcdn.com/images/ted/de98b161ad1434910ff4b56c89de71af04b8b873_1600x1200.jpg&#39;, &#39;speaker&#39;: &#39;Ken Robinson&#39;, &#39;title&#39;: &#34;How to escape education&#39;s death valley&#34;, &#39;duration&#39;: 1151, &#39;slug&#39;: &#39;ken_robinson_how_to_escape_education_s_death_valley&#39;, &#39;viewed_count&#39;: 6657572}, {&#39;id&#39;: 2276, &#39;hero&#39;: &#39;https://pe.tedcdn.com/images/ted/3821f3728e0b755c7b9aea2e69cc093eca41abe1_2880x1620.jpg&#39;, &#39;speaker&#39;: &#39;Linda Cliatt-Wayman&#39;, &#39;title&#39;: &#39;How to fix a broken school? Lead fearlessly, love hard&#39;, &#39;duration&#39;: 1027, &#39;slug&#39;: &#39;linda_cliatt_wayman_how_to_fix_a_broken_school_lead_fearlessly_love_hard&#39;, &#39;viewed_count&#39;: 1617101}, {&#39;id&#39;: 892, &#39;hero&#39;: &#39;https://pe.tedcdn.com/images/ted/e79958940573cc610ccb583619a54866c41ef303_2880x1620.jpg&#39;, &#39;s... eigenvector_value_x eigenvector_value_y eigenvector_value 0 0.003404 0.003404 0.003404 . #TODO: Insert graphs from gephi, and modularity analysis edges_df.to_csv(&#39;graph_edges.csv&#39;) . # Lets take a detour to Network Analytics using a WYSIWYG software called Gephi (Download here). # We can create a directed graph from spreadsheet. We can analyse eigen vectors, degree, pagerank, and modularity. # Modularity is.... image_folder_path = os.getcwd() + &quot; img &quot; # Following is the picture of directed graph Image(filename = image_folder_path + &quot;overall_graph.png&quot;, width=250, height=250) . #Following is the picture of biggest modularity class (subgroup) and the associated data. x = Image(filename = image_folder_path + &quot;technology&amp;innovation_module.png&quot;, width=250, height=250) y = Image(filename = image_folder_path + &quot;technology&amp;innovation_module_data.png&quot;, width=800, height=800) display(x,y) . #Following is the picture of second biggest modularity class (subgroup) and the associated data. x = Image(filename = image_folder_path + &quot;art_design_arch.png&quot;, width=250, height=250) y = Image(filename = image_folder_path + &quot;art_design_arch_data.png&quot;, width=800, height=800) display(x,y) . # We have transcript of all the talks. Hence we can create a TFIDF keywords # We can create a TFIDF matrix of transript terms for all talks. We will use TFIDF vectorizer of SKLearn. tfidf_vector = TfidfVectorizer(stop_words=&#39;english&#39;) tfidf_values = tfidf_vector.fit_transform(final_ted_df[&#39;transcript&#39;]) tfidf_matrix = tfidf_values.toarray() print(tfidf_matrix.shape) #it has fonud 58795 features (columns) for 2467 ted videos (rows) # show some 50 features out of identified 58795 features. print(tfidf_vector.get_feature_names()[5000:5050]) # If you scroll down it has lot of features (terms) identified from transcript. # As we see that some of the numbers have been identified as features which could be avoided by preprocessing data. # It will be done in the next version. . (2467, 58489) [&#39;baldness&#39;, &#39;baldwin&#39;, &#39;baldy&#39;, &#39;bale&#39;, &#39;baleen&#39;, &#39;baleful&#39;, &#39;balenciaga&#39;, &#39;balers&#39;, &#39;bales&#39;, &#39;balfour&#39;, &#39;bali&#39;, &#39;balikpapan&#39;, &#39;balinese&#39;, &#39;balk&#39;, &#39;balkan&#39;, &#39;balkans&#39;, &#39;balked&#39;, &#39;balkh&#39;, &#39;balkhi&#39;, &#39;ball&#39;, &#39;ballads&#39;, &#39;ballah&#39;, &#39;ballard&#39;, &#39;ballast&#39;, &#39;ballasted&#39;, &#39;ballbot&#39;, &#39;ballbots&#39;, &#39;balled&#39;, &#39;ballerina&#39;, &#39;ballet&#39;, &#39;balletic&#39;, &#39;ballets&#39;, &#39;ballgame&#39;, &#39;ballistic&#39;, &#39;ballistically&#39;, &#39;ballistics&#39;, &#39;ballmer&#39;, &#39;balloon&#39;, &#39;ballooning&#39;, &#39;balloonist&#39;, &#39;balloons&#39;, &#39;ballot&#39;, &#39;ballots&#39;, &#39;ballpark&#39;, &#39;ballplayer&#39;, &#39;ballpoint&#39;, &#39;ballroom&#39;, &#39;ballrooms&#39;, &#39;balls&#39;, &#39;ballsy&#39;] . #Now that we are done with eigen vectors and TFIDF. # For search query entered we need to create matching scores word in search query for all TED videos and sum them. # Since we intend to show top 5 searches, we will show the top 5 TED videos based on matching scores. #search_query = &quot;schools&quot; #search_query = &quot;technology and robots&quot; search_query = &quot;inspiration and courage&quot; . # Matching score for all the TED videos. # Get search tokens in the search query search_tokens = search_query.split(&quot; &quot;) # Find the index of all search tokens in feature names obtained from TFIDF vectorizer. feature_names = tfidf_vector.get_feature_names() token_indexes = list() for token in search_tokens: if token in feature_names: index = feature_names.index(token) token_indexes.append(index) if len(token_indexes) == 0: # No search term found in the feature names. Return no results. print(&quot;No results&quot;) else: print(token_indexes) matching_scores = np.zeros(2467) for index in token_indexes: matching_scores = np.add(matching_scores, tfidf_matrix[:,index]) print(matching_scores) print(matching_scores.shape) . [26788, 12444] [0. 0. 0. ... 0.01912304 0. 0. ] (2467,) . # Create a dataframe with title,url,matching_scores,eigen vector values search_dataframe = final_ted_df[[&#39;title&#39;,&#39;url&#39;, &#39;eigenvector_value&#39;]] search_dataframe = search_dataframe.assign(matching_scores=matching_scores) search_dataframe[&#39;total_score&#39;] = 0.5 * search_dataframe[&#39;matching_scores&#39;] + 0.5 * search_dataframe[&#39;eigenvector_value&#39;] search_dataframe.sort_values([&#39;total_score&#39;], ascending=[False], inplace = True) # Show the top 5 search results print(search_dataframe.head(5)[[&#39;title&#39;,&#39;url&#39;]]) . title 2426 Courage is contagious 1681 I&#39;m not your inspiration, thank you very much 2239 It&#39;s time for women to run for office 2196 A new way to heal hearts without surgery 800 The power of vulnerability url 2426 https://www.ted.com/talks/damon_davis_what_i_saw_at_the_ferguson_protests n 1681 https://www.ted.com/talks/stella_young_i_m_not_your_inspiration_thank_you_very_much n 2239 https://www.ted.com/talks/halla_tomasdottir_it_s_time_for_women_to_run_for_office n 2196 https://www.ted.com/talks/franz_freudenthal_a_new_way_to_heal_hearts_without_surgery n 800 https://www.ted.com/talks/brene_brown_on_vulnerability n . &lt;/div&gt; |",
            "url": "https://kn-neeraj.github.io/analyticsblog/2020/04/07/vertical-search.html",
            "relUrl": "/2020/04/07/vertical-search.html",
            "date": " • Apr 7, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kn-neeraj.github.io/analyticsblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kn-neeraj.github.io/analyticsblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kn-neeraj.github.io/analyticsblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}